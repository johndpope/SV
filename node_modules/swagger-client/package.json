{
  "_args": [
    [
      {
        "raw": "swagger-client@^2.1.16",
        "scope": null,
        "escapedName": "swagger-client",
        "name": "swagger-client",
        "rawSpec": "^2.1.16",
        "spec": ">=2.1.16 <3.0.0",
        "type": "range"
      },
      "/home/libi/dirox/social-voucher/node_modules/g11n-pipeline"
    ]
  ],
  "_from": "swagger-client@>=2.1.16 <3.0.0",
  "_id": "swagger-client@2.2.21",
  "_inCache": true,
  "_location": "/swagger-client",
  "_nodeVersion": "0.12.13",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/swagger-client-2.2.21.tgz_1475191647424_0.2705967577639967"
  },
  "_npmUser": {
    "name": "swagger-api",
    "email": "apiteam@swagger.io"
  },
  "_npmVersion": "2.15.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "swagger-client@^2.1.16",
    "scope": null,
    "escapedName": "swagger-client",
    "name": "swagger-client",
    "rawSpec": "^2.1.16",
    "spec": ">=2.1.16 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/g11n-pipeline"
  ],
  "_resolved": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.2.21.tgz",
  "_shasum": "5966be234772466e44716f65e32008166daeeba4",
  "_shrinkwrap": null,
  "_spec": "swagger-client@^2.1.16",
  "_where": "/home/libi/dirox/social-voucher/node_modules/g11n-pipeline",
  "author": {
    "name": "Tony Tam",
    "email": "fehguy@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/swagger-api/swagger-js/issues"
  },
  "contributors": [
    {
      "name": "Jeremy Whitlock",
      "email": "jcscoobyrs@gmail.com"
    }
  ],
  "dependencies": {
    "btoa": "^1.1.2",
    "cookiejar": "^2.0.1",
    "js-yaml": "^3.3.0",
    "lodash-compat": "^3.5.0",
    "q": "^1.4.1",
    "superagent": "^2.2"
  },
  "description": "swagger-client is a javascript client for use with swaggering APIs.",
  "devDependencies": {
    "async": "^0.9.0",
    "brfs": "^1.4.0",
    "browserify": "^9.0.3",
    "buffer": "3.4.3",
    "chai": "^2.3.0",
    "connect-cors": "^0.5.6",
    "del": "^1.1.1",
    "expect": "1.4.0",
    "faux-jax": "^4.0.0",
    "gulp": "^3.8.10",
    "gulp-buffer": "0.0.2",
    "gulp-connect": "^2.2.0",
    "gulp-header": "^1.2.2",
    "gulp-istanbul": "^0.5.0",
    "gulp-jshint": "^1.9.0",
    "gulp-mocha": "^2.0.0",
    "http-server": "^0.8.0",
    "jshint-stylish": "^1.0.1",
    "karma": "^0.13.0",
    "karma-browserify": "^4.2.1",
    "karma-firefox-launcher": "^0.1.6",
    "karma-mocha": "^0.1.10",
    "karma-source-map-support": "^1.0.0",
    "md5-file": "^3.1.1",
    "mocha": "^1.21.3",
    "object.assign": "^3.0.0",
    "selenium-webdriver": "^2.45.1",
    "uglifyify": "^3.0.1",
    "unit.js": "^2.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "5966be234772466e44716f65e32008166daeeba4",
    "tarball": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.2.21.tgz"
  },
  "engines": {
    "node": ">= 0.6.6"
  },
  "files": [
    "LICENSE",
    "lib",
    "browser",
    "index.js"
  ],
  "gitHead": "c48fea3c4a285279654d9d461217d68fc7d35b35",
  "homepage": "http://swagger.io",
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "fehguy",
      "email": "fehguy@gmail.com"
    },
    {
      "name": "swagger-api",
      "email": "apiteam@swagger.io"
    }
  ],
  "name": "swagger-client",
  "optionalDependencies": {},
  "readme": "# Swagger JS library\n\n[![Build Status](https://travis-ci.org/swagger-api/swagger-js.svg?branch=master)](https://travis-ci.org/swagger-api/swagger-js)\n[![NPM version](https://badge.fury.io/js/swagger-client.svg)](http://badge.fury.io/js/swagger-client)\n\nThis is the Swagger javascript client for use with [swagger](http://swagger.io) enabled APIs.\nIt's written in javascript and tested with mocha, and is the fastest way to enable a javascript client to communicate with a swagger-enabled server.\n\nCheck out [Swagger-Spec](https://github.com/swagger-api/swagger-spec) for additional information about the Swagger project, including additional libraries with support for other languages and more.\n\n\n### Calling an API with swagger + node.js!\n\nInstall swagger-client:\n```\nnpm install swagger-client\n```\n\nor:\n\n```\nbower install swagger-js\n```\n\nThen let swagger do the work!\n```js\nvar Swagger = require('swagger-client');\n\nvar client = new Swagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    client.pet.getPetById({petId:7},{responseContentType: 'application/json'},function(pet){\n      console.log('pet', pet);\n    });\n  }\n});\n```\n\nNOTE: we're explicitly setting the responseContentType, because we don't want you getting stuck when \nthere is more than one content type available.\n\nThat's it!  You'll get a JSON response with the default callback handler:\n\n```json\n{\n  \"id\": 1,\n  \"category\": {\n    \"id\": 2,\n    \"name\": \"Cats\"\n  },\n  \"name\": \"Cat 1\",\n  \"photoUrls\": [\n    \"url1\",\n    \"url2\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"tag1\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"tag2\"\n    }\n  ],\n  \"status\": \"available\"\n}\n```\n\n### Handling success and failures\n\nYou need to pass success and error functions to do anything reasonable with the responses:\n\n```js\nvar Swagger = require('swagger-client');\n\nvar client = new Swagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    client.pet.getPetById({petId:7}, function(success){\n      console.log('succeeded and returned this object: ' + success.obj);\n    },\n    function(error) {\n      console.log('failed with the following: ' + error.statusText);\n    });\n  }\n});\n```\n\nYou can use promises, too, by passing the `usePromise: true` option:\n\n```js\nvar Swagger = require('swagger-client');\n\nnew Swagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  usePromise: true\n})\n.then(function(client) {\n  client.pet.getPetById({petId:7})\n    .then(function(pet) {\n      console.log(pet.obj);\n    })\n    .catch(function(error) {\n      console.log('Oops!  failed with message: ' + error.statusText);\n    });\n});\n```\n\nNeed to pass an API key?  Configure one in your client instance as a query string:\n\n```js\nclient.clientAuthorizations.add(\"apiKey\", new Swagger.ApiKeyAuthorization(\"api_key\",\"special-key\",\"query\"));\n```\n\n...or with a header:\n\n```js\nclient.clientAuthorizations.add(\"apiKey\", new Swagger.ApiKeyAuthorization(\"api_key\",\"special-key\",\"header\"));\n```\n\n...or with the swagger-client constructor:\n\n```js\nvar client = new Swagger({\n  url: 'http://example.com/spec.json',\n  success: function() {},\n  authorizations : {\n    easyapi_basic: new Swagger.PasswordAuthorization('<username>', '<password>'),\n    someHeaderAuth: new Swagger.ApiKeyAuthorization('<nameOfHeader>', '<value>', 'header'),\n    someQueryAuth: new Swagger.ApiKeyAuthorization('<nameOfQueryKey>', '<value>', 'query'),\n    someCookieAuth: new Swagger.CookieAuthorization('<cookie>'),\n  }\n});\n```\n\nNote the authorization nickname, such as `easyapi_basic` in the above example, must match the `security` requirement in the specification (see the [OAI Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/README.md) for details).\n\nYou can also pass authorzations on a _per-request_ basis, in the event that you're reusing a `swagger-client` object across multiple connections:\n\n```\nclient.pet.addPet({pet: {\n    name: 'doggie'\n  }}, {\n    clientAuthorizations: {\n      api_key: new Swagger.ApiKeyAuthorization('foo', 'bar', 'header')\n    }\n  })\n  .then(function(pet) {\n    console.log(pet.obj);\n  });\n```\n\n\n### Calling an API with swagger + the browser!\n\nDownload [`browser/swagger-client.min.js`](https://raw.githubusercontent.com/swagger-api/swagger-js/master/browser/swagger-client.min.js) and place it into your webapp:\n\n```html\n<script src='browser/swagger-client.js' type='text/javascript'></script>\n<script type=\"text/javascript\">\n  // initialize swagger client, point to a resource listing\n  window.client = new SwaggerClient({\n    url: \"http://petstore.swagger.io/v2/swagger.json\",\n    success: function() {\n      // upon connect, fetch a pet and set contents to element \"mydata\"\n      client.pet.getPetById({petId:1},{responseContentType: 'application/json'}, function(data) {\n        document.getElementById(\"mydata\").innerHTML = JSON.stringify(data.obj);\n      });\n    }\n  });\n</script>\n\n<body>\n  <div id=\"mydata\"></div>\n</body>\n```\n\n### Need to send an object to your API via POST or PUT?\n```js\nvar pet = {\n  id: 100,\n  name: \"dog\"};\n\n// note: the parameter for `addPet` is named `body` in the example below\nclient.pet.addPet({body: pet});\n```\n\n### Sending XML in as a payload to your API?\n```js\nvar pet = \"<Pet><id>2</id><name>monster</name></Pet>\";\n\nclient.pet.addPet({body: pet}, {requestContentType:\"application/xml\"});\n```\n\n### Need XML response? (assuming your server can produce it)\n```js\nclient.pet.getPetById({petId:1}, {responseContentType:\"application/xml\"});\n```\n\n### Custom request signing\nYou can easily write your own request signing code for Swagger.  For example:\n\n```js\nvar CustomRequestSigner = function(name) {\n  this.name = name;\n};\n\nCustomRequestSigner.prototype.apply = function(obj, authorizations) {\n  var hashFunction = this._btoa;\n  var hash = hashFunction(obj.url);\n\n  obj.headers[\"signature\"] = hash;\n  return true;\n};\n```\n\nIn the above simple example, we're creating a new request signer that simply\nBase64 encodes the URL.  Of course you'd do something more sophisticated, but\nafter encoding it, a header called `signature` is set before sending the request.\n\nYou can add it to the swagger-client like such:\n\n```js\nclient.clientAuthorizations.add('my-auth', new CustomRequestSigner());\n```\n\n### Setting headers\n\nHeaders are a type of `parameter`, and can be passed with the other parameters. For example, if you supported translated pet details via the `Accept-Language` header:\n\n```js\n\"parameters\": [\n  {\n    \"name\": \"petId\",\n    \"description\": \"ID of pet that needs to be fetched\",\n    \"required\": true,\n    \"type\": \"integer\",\n    \"format\": \"int64\",\n    \"paramType\": \"path\",\n    \"minimum\": \"1.0\",\n    \"defaultValue\": 3,\n    \"maximum\": \"100000.0\"\n  },\n  \"LanguageHeader\": {\n    \"name\": \"Accept-Language\",\n    \"in\": \"header\",\n    \"description\": \"Specify the user's language\",\n    \"required\": false,\n    \"type\": \"string\"\n  }\n...\n```\n\nThen you would pass the header value via the parameters ([header parameters are case-insenstive](https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2)):\n\n```js\n\nclient.pet.getPetById({\n  petId: 7,\n  'accept-language': 'fr'\n}, function(pet){\n  console.log('pet', pet);\n});\n\n```\n\n### Using your own HTTP client\n\nDon't like [superagent](https://github.com/visionmedia/superagent)? Despise [JQuery](https://github.com/jquery/jquery)?  Well, you're in luck.  You can plug your own HTTP library easily:\n\n```js\nvar myHttpClient = {\n  // implment an execute function\n  execute: function(obj) {\n    var httpMethod = obj.method;\n    var requestHeaders = obj.headers;\n    var body = obj.body;\n    var url = obj.url;\n    // do your thing, and call `obj.on.response`\n    if(itWorked) {\n      obj.on.response('horray');\n    }\n    else {\n      obj.on.error('boo');\n    }\n  }\n};\n\nvar client = new SwaggerClient({\n  spec: petstoreRaw,\n  client: myHttpClient,\n  success: function () {\n    client.pet.getPetById({petId: 3}, function(data){\n      expect(data).toBe('ok');\n      done();\n    });\n  }\n});\n```\n\n### How does it work?\nThe swagger javascript client reads the swagger api definition directly from the server.  As it does, it constructs a client based on the api definition, which means it is completely dynamic.  It even reads the api text descriptions (which are intended for humans!) and provides help if you need it:\n\n```js\ns.apis.pet.getPetById.help()\n'* petId (required) - ID of pet that needs to be fetched'\n```\n\nThe HTTP requests themselves are handled by the excellent [superagent](https://github.com/visionmedia/superagent) library, which has a ton of features itself.  But it runs on both node and the browser.\n\n\nDevelopment\n-----------\n\nPlease [fork the code](https://github.com/swagger-api/swagger-js) and help us improve swagger-js. Send us a pull request to the `master` branch!  Tests make merges get accepted more quickly.\n\nNote!  We _will not_ merge pull requests for features not supported in the OAI Specification!  Add an issue there instead!\n\nswagger-js use gulp for Node.js.\n\n```bash\n# Install the gulp client on the path\nnpm install -g gulp\n\n# Install all project dependencies\nnpm install\n```\n\n```bash\n# List all tasks.\ngulp -T\n\n# Run lint (will not fail if there are errors/warnings), tests (without coverage) and builds the browser binaries\ngulp\n\n# Run the test suite (without coverage)\ngulp test\n\n# Build the browser binaries (One for development with source maps and one that is minified and without source maps) in the browser directory\ngulp build\n\n# Continuously run the test suite:\ngulp watch\n\n# Run jshint report\ngulp lint\n\n# Run a coverage report based on running the unit tests\ngulp coverage\n```\n\nLicense\n-------\n\nCopyright 2016 SmartBear Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n[apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n---\n<img src=\"http://swagger.io/wp-content/uploads/2016/02/logo.jpg\"/>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/swagger-api/swagger-js.git"
  },
  "scripts": {
    "browsertest": "gulp browsertest",
    "build": "gulp build",
    "dev": "gulp watch",
    "test": "gulp test"
  },
  "version": "2.2.21"
}
