{
  "Author": "Steven R. Loomis <srloomis@us.ibm.com>",
  "_args": [
    [
      {
        "raw": "g11n-pipeline@^1.4.0",
        "scope": null,
        "escapedName": "g11n-pipeline",
        "name": "g11n-pipeline",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "/home/libi/dirox/social-voucher/node_modules/strong-globalize"
    ]
  ],
  "_from": "g11n-pipeline@>=1.4.0 <2.0.0",
  "_id": "g11n-pipeline@1.4.0",
  "_inCache": true,
  "_location": "/g11n-pipeline",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/g11n-pipeline-1.4.0.tgz_1490234347703_0.11320298328064382"
  },
  "_npmUser": {
    "name": "srl",
    "email": "srl@icu-project.org"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "g11n-pipeline@^1.4.0",
    "scope": null,
    "escapedName": "g11n-pipeline",
    "name": "g11n-pipeline",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/strong-globalize"
  ],
  "_resolved": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.4.0.tgz",
  "_shasum": "1b58b849d9e5f2cf0bb5c99a45577cec67920e2c",
  "_shrinkwrap": null,
  "_spec": "g11n-pipeline@^1.4.0",
  "_where": "/home/libi/dirox/social-voucher/node_modules/strong-globalize",
  "bugs": {
    "url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
  },
  "dependencies": {
    "swagger-client": "^2.1.16"
  },
  "description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
  "devDependencies": {
    "chai": "^3.2.0",
    "char-spinner": "^1.0.1",
    "coveralls": "^2.11.12",
    "github-markdown-css": "^2.2.0",
    "istanbul": "^0.4.1",
    "jsdoc-to-markdown": "^2.0.1",
    "marked": "^0.3.5",
    "mocha": "^2.2.5",
    "nyc": "^8.1.0",
    "optional": "^0.1.3",
    "q": "^1.4.1",
    "request": "^2.67.0"
  },
  "directories": {},
  "dist": {
    "shasum": "1b58b849d9e5f2cf0bb5c99a45577cec67920e2c",
    "tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.4.0.tgz"
  },
  "gitHead": "a4c61afeceaa24e1a92066c889b9a62a2ee08267",
  "homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
  "keywords": [
    "l10n"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "srl",
      "email": "srl@icu-project.org"
    }
  ],
  "name": "g11n-pipeline",
  "optionalDependencies": {},
  "readme": "Globalization Pipeline Client for JavaScript\n============================================\n\nThis is the JavaScript SDK for the\n[Globalization Pipeline](https://github.com/IBM-Bluemix/gp-common#globalization-pipeline)\nBluemix service. \nThe Globalization Pipeline service makes it easy for you to provide your global customers\nwith Bluemix applications translated into the languages in which they work. \nThis SDK currently supports [Node.js](http://nodejs.org).\n\n[![npm version](https://badge.fury.io/js/g11n-pipeline.svg)](https://badge.fury.io/js/g11n-pipeline)\n[![Build Status](https://travis-ci.org/IBM-Bluemix/gp-js-client.svg?branch=master)](https://travis-ci.org/IBM-Bluemix/gp-js-client)\n[![Coverage Status](https://coveralls.io/repos/github/IBM-Bluemix/gp-js-client/badge.svg)](https://coveralls.io/github/IBM-Bluemix/gp-js-client)\n[![Coverity Status](https://img.shields.io/coverity/scan/9399.svg)](https://scan.coverity.com/projects/ibm-bluemix-gp-js-client)\n\n## Sample\n\nFor a working Bluemix application sample,\nsee [gp-nodejs-sample](https://github.com/IBM-Bluemix/gp-nodejs-sample).\n\n## Quickstart\n\n* You should familiarize yourself with the service itself. A\ngood place to begin is by reading the\n[Quick Start Guide](https://github.com/IBM-Bluemix/gp-common#quick-start-guide)\nand the official\n[Getting Started with IBM Globalization ](https://www.ng.bluemix.net/docs/services/GlobalizationPipeline/index.html) documentation.\nThe documentation explains how to find the service on Bluemix, create a new service instance, create a new bundle, and access the translated messages.\n\n* Next, add `g11n-pipeline` to your project, as well as `cfenv` and `optional`.\n\n    npm install --save g11n-pipeline cfenv optional\n\n* Load the client object as follows (using [cfenv](https://www.npmjs.com/package/cfenv) ).\n\n```javascript\nvar optional = require('optional');\nvar appEnv = require('cfenv').getAppEnv();\nvar gpClient = require('g11n-pipeline').getClient(\n  optional('./local-credentials.json')   // if it exists, use local-credentials.json\n    || {appEnv: appEnv}                  // otherwise, the appEnv\n);\n```\n\n* For local testing, create a `local-credentials.json` file with the credentials\nas given in the bound service:\n\n      {\n        \"credentials\": {\n          \"url\": \"https://…\",\n          \"userId\": \"…\",\n          \"password\": \"……\",\n          \"instanceId\": \"………\"\n        }\n      }\n\n## Using\n\nTo fetch the strings for a bundle named \"hello\", first create a bundle accessor:\n\n```javascript\n    var mybundle = gpClient.bundle('hello');\n```\n\nThen, call the `getStrings` function with a callback:\n\n```javascript\n    mybundle.getStrings({ languageId: 'es'}, function (err, result) {\n        if (err) {\n            // handle err..\n            console.error(err);\n        } else {\n            var myStrings = result.resourceStrings;\n            console.dir(myStrings);\n        }\n    });\n```\n\nThis code snippet will output the translated strings such as the following:\n\n```javascript\n    {\n        hello:   '¡Hola!',\n        goodbye: '¡Adiós!',\n        …\n    }\n```\n\n### Async\n\nNote that all calls that take a callback are asynchronous.\nFor example, the following code:\n\n```javascript\nvar bundle = client.bundle('someBundle');\nbundle.create({…}, function(…){…});\nbundle.uploadStrings({…}, function(…){…});\n```\n\n…will fail, because the bundle `someBundle` hasn’t been `create`d by the time the\n`uploadStrings` call is made. Instead, make the `uploadStrings` call within a callback:\n\n```javascript\nvar bundle = client.bundle('someBundle');\nbundle.create({…}, function(…){\n    …\n    bundle.uploadStrings({…}, function(…){…});\n});\n```\n\n## Testing\n\nSee [TESTING.md](TESTING.md)\n\nAPI convention\n==\n\nAPIs take a callback and use this general pattern:\n\n```javascript\n    gpClient.function( { /*opts*/ } ,  function callback(err, ...))\n```\n\n* opts: an object containing input parameters, if needed.\n* `err`: if truthy, indicates an error has occured.\n* `...`: other parameters (optional)\n\nSometimes the `opts` object is optional. If this is the case, the\nAPI doc will indicate it with this notation:  `[opts]`\nFor example,  `bundle.getInfo(cb)` and `bundle.getInfo({}, cb)`  are equivalent.\n\nThese APIs may be promisified easily using a library such as `Q`'s\n[nfcall](http://documentup.com/kriskowal/q/#adapting-node):\n\n```javascript\n    return Q.ninvoke(bundle, \"delete\", {});\n    return Q.ninvoke(gpClient, \"getBundleList\", {});\n```\n\nAlso, note that there are aliases from the swagger doc function names\nto the convenience name. For example, `bundle.uploadResourceStrings` can be \nused in place of `bundle.uploadStrings`.\n\nAll language identifiers are [IETF BCP47](http://tools.ietf.org/html/bcp47) codes.\n\nAPI reference\n===\n\n## Classes\n\n<dl>\n<dt><a href=\"#Client\">Client</a></dt>\n<dd></dd>\n<dt><a href=\"#Bundle\">Bundle</a></dt>\n<dd></dd>\n<dt><a href=\"#User\">User</a></dt>\n<dd></dd>\n<dt><a href=\"#ResourceEntry\">ResourceEntry</a></dt>\n<dd><p>ResourceEntry\nCreating this object does not modify any data.</p>\n</dd>\n</dl>\n\n## Members\n\n<dl>\n<dt><a href=\"#serviceRegex\">serviceRegex</a></dt>\n<dd><p>a Regex for matching the service.\nUsage: var credentials = require(&#39;cfEnv&#39;)\n     .getAppEnv().getServiceCreds(gp.serviceRegex);\n(except that it needs to match by label)</p>\n</dd>\n<dt><a href=\"#exampleCredentials\">exampleCredentials</a></dt>\n<dd><p>Example credentials</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#getClient\">getClient(params)</a> ⇒ <code><a href=\"#Client\">Client</a></code></dt>\n<dd><p>Construct a g11n-pipeline client. \nparams.credentials is required unless params.appEnv is supplied.</p>\n</dd>\n<dt><a href=\"#isMissingField\">isMissingField(obj, fields)</a> ⇒</dt>\n<dd><p>Return a list of missing fields. Special cases the instanceId field.</p>\n</dd>\n</dl>\n\n## Typedefs\n\n<dl>\n<dt><a href=\"#basicCallback\">basicCallback</a> : <code>function</code></dt>\n<dd><p>Basic Callback used throughout the SDK</p>\n</dd>\n<dt><a href=\"#ExternalService\">ExternalService</a> : <code>Object</code></dt>\n<dd><p>info about external services available</p>\n</dd>\n</dl>\n\n<a name=\"Client\"></a>\n\n## Client\n**Kind**: global class  \n\n* [Client](#Client)\n    * [new Client()](#new_Client_new)\n    * _instance_\n        * [.version](#Client+version)\n        * [.ping](#Client+ping)\n        * [.supportedTranslations([opts], cb)](#Client+supportedTranslations)\n        * [.getServiceInfo([opts], cb)](#Client+getServiceInfo)\n        * [.createUser(args, cb)](#Client+createUser)\n        * [.bundle(opts)](#Client+bundle) ⇒ <code>[Bundle](#Bundle)</code>\n        * [.user(id)](#Client+user) ⇒ <code>[User](#User)</code>\n        * [.users([opts], cb)](#Client+users)\n        * [.bundles([opts], cb)](#Client+bundles)\n    * _inner_\n        * [~supportedTranslationsCallback](#Client..supportedTranslationsCallback) : <code>function</code>\n        * [~serviceInfoCallback](#Client..serviceInfoCallback) : <code>function</code>\n        * [~listUsersCallback](#Client..listUsersCallback) : <code>function</code>\n        * [~listBundlesCallback](#Client..listBundlesCallback) : <code>function</code>\n\n<a name=\"new_Client_new\"></a>\n\n### new Client()\nClient object for Globalization Pipeline\n\n<a name=\"Client+version\"></a>\n\n### client.version\nVersion number of the REST service used. Currently ‘V2’.\n\n**Kind**: instance property of <code>[Client](#Client)</code>  \n<a name=\"Client+ping\"></a>\n\n### client.ping\nVerify that there is access to the server. An error result\nwill be returned if there is a problem. On success, the data returned\ncan be ignored. (Note: this is a synonym for getServiceInfo())\n\n**Kind**: instance property of <code>[Client](#Client)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| args | <code>object</code> | (ignored) |\n| cb | <code>[basicCallback](#basicCallback)</code> |  |\n\n<a name=\"Client+supportedTranslations\"></a>\n\n### client.supportedTranslations([opts], cb)\nThis function returns a map from source language(s) to target language(s).\nExample: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese.\n\n**Kind**: instance method of <code>[Client](#Client)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>object</code> | <code>{}</code> | ignored |\n| cb | <code>[supportedTranslationsCallback](#Client..supportedTranslationsCallback)</code> |  | (err, map-of-languages) |\n\n<a name=\"Client+getServiceInfo\"></a>\n\n### client.getServiceInfo([opts], cb)\nGet information about this service.\nAt present, no information is returned beyond that expressed by supportedTranslations().\n\n**Kind**: instance method of <code>[Client](#Client)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>object</code> | <code>{}</code> | ignored argument |\n| cb | <code>[serviceInfoCallback](#Client..serviceInfoCallback)</code> |  |  |\n\n<a name=\"Client+createUser\"></a>\n\n### client.createUser(args, cb)\nCreate a user\n\n**Kind**: instance method of <code>[Client](#Client)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| args | <code>object</code> |  |\n| args.type | <code>string</code> | User type (ADMINISTRATOR, TRANSLATOR, or READER) |\n| args.displayName | <code>string</code> | Optional display name for the user.  This can be any string and is displayed in the service dashboard. |\n| args.comment | <code>string</code> | Optional comment |\n| args.bundles | <code>Array</code> | set of accessible bundle ids. Use `['*']` for “all bundles” |\n| args.metadata | <code>Object.&lt;string, string&gt;</code> | optional key/value pairs for user metadata |\n| args.externalId | <code>string</code> | optional external user ID for your application’s use |\n| cb | <code>[getUserCallback](#User..getUserCallback)</code> | passed a new User object |\n\n<a name=\"Client+bundle\"></a>\n\n### client.bundle(opts) ⇒ <code>[Bundle](#Bundle)</code>\nCreate a bundle access object.\nThis doesn’t create the bundle itself, just a handle object.\nCall create() on the bundle to create it.\n\n**Kind**: instance method of <code>[Client](#Client)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | String (id) or map {id: bundleId, serviceInstance: serviceInstanceId} |\n\n<a name=\"Client+user\"></a>\n\n### client.user(id) ⇒ <code>[User](#User)</code>\nCreate a user access object.\nThis doesn’t create the user itself,\nnor query the server, but is just a handle object.\nUse createUser() to create a user.\n\n**Kind**: instance method of <code>[Client](#Client)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>Object</code> | String (id) or map {id: bundleId, serviceInstance: serviceInstanceId} |\n\n<a name=\"Client+users\"></a>\n\n### client.users([opts], cb)\nList users. Callback is called with an array of \nuser access objects.\n\n**Kind**: instance method of <code>[Client](#Client)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | <code>[listUsersCallback](#Client..listUsersCallback)</code> |  | callback |\n\n<a name=\"Client+bundles\"></a>\n\n### client.bundles([opts], cb)\nList bundles. Callback is called with an map of \nbundle access objects.\n\n**Kind**: instance method of <code>[Client](#Client)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | <code>[listBundlesCallback](#Client..listBundlesCallback)</code> |  | given a map of Bundle objects |\n\n<a name=\"Client..supportedTranslationsCallback\"></a>\n\n### Client~supportedTranslationsCallback : <code>function</code>\nCallback returned by supportedTranslations()\n\n**Kind**: inner typedef of <code>[Client](#Client)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| languages | <code>Object.&lt;string, Array.&lt;string&gt;&gt;</code> | map from source language to array of target languages Example: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese. |\n\n<a name=\"Client..serviceInfoCallback\"></a>\n\n### Client~serviceInfoCallback : <code>function</code>\nCallback used by getServiceInfo()\n\n**Kind**: inner typedef of <code>[Client](#Client)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| info | <code>Object</code> | detailed information about the service |\n| info.supportedTranslation | <code>Object.&lt;string, Array.&lt;string&gt;&gt;</code> | map from source language to array of target languages Example: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese. |\n| info.externalServices | <code>[Array.&lt;ExternalService&gt;](#ExternalService)</code> | info about external services available |\n\n<a name=\"Client..listUsersCallback\"></a>\n\n### Client~listUsersCallback : <code>function</code>\nCalled by users()\n\n**Kind**: inner typedef of <code>[Client](#Client)</code>  \n**See**: User  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| users | <code>Object.&lt;string, User&gt;</code> | map from user ID to User object |\n\n<a name=\"Client..listBundlesCallback\"></a>\n\n### Client~listBundlesCallback : <code>function</code>\nBundle list callback\n\n**Kind**: inner typedef of <code>[Client](#Client)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| bundles | <code>Object.&lt;string, Bundle&gt;</code> | map from bundle ID to Bundle object |\n\n<a name=\"Bundle\"></a>\n\n## Bundle\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| updatedBy | <code>string</code> | userid that updated this bundle |\n| updatedAt | <code>Date</code> | date when the bundle was last updated |\n| sourceLanguage | <code>string</code> | bcp47 id of the source language |\n| targetLanguages | <code>Array.&lt;string&gt;</code> | array of target langauge bcp47 ids |\n| readOnly | <code>boolean</code> | true if this bundle can only be read |\n| metadata | <code>Object.&lt;string, string&gt;</code> | array of user-editable metadata |\n\n\n* [Bundle](#Bundle)\n    * [new Bundle(gp, props)](#new_Bundle_new)\n    * _instance_\n        * [.getInfoFields](#Bundle+getInfoFields)\n        * [.delete([opts], cb)](#Bundle+delete)\n        * [.create(body, cb)](#Bundle+create)\n        * [.getInfo([opts], cb)](#Bundle+getInfo)\n        * [.languages()](#Bundle+languages) ⇒ <code>Array.&lt;String&gt;</code>\n        * [.getStrings(opts, cb)](#Bundle+getStrings)\n        * [.entry(opts)](#Bundle+entry)\n        * [.entries(opts, cb)](#Bundle+entries)\n        * [.uploadStrings(opts, cb)](#Bundle+uploadStrings)\n        * [.update(opts, cb)](#Bundle+update)\n        * [.updateStrings(opts, cb)](#Bundle+updateStrings)\n    * _inner_\n        * [~getInfoCallback](#Bundle..getInfoCallback) : <code>function</code>\n        * [~listEntriesCallback](#Bundle..listEntriesCallback) : <code>function</code>\n\n<a name=\"new_Bundle_new\"></a>\n\n### new Bundle(gp, props)\nNote: this constructor is not usually called directly, use Client.bundle(id)\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| gp | <code>[Client](#Client)</code> | parent g11n-pipeline client object |\n| props | <code>Object</code> | properties to inherit |\n\n<a name=\"Bundle+getInfoFields\"></a>\n\n### bundle.getInfoFields\nList of fields usable with Bundle.getInfo()\n\n**Kind**: instance property of <code>[Bundle](#Bundle)</code>  \n<a name=\"Bundle+delete\"></a>\n\n### bundle.delete([opts], cb)\nDelete this bundle.\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | <code>[basicCallback](#basicCallback)</code> |  |  |\n\n<a name=\"Bundle+create\"></a>\n\n### bundle.create(body, cb)\nCreate this bundle with the specified params.\nNote that on failure, such as an illegal language being specified,\nthe bundle is not created.\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| body | <code>Object</code> |  |\n| body.sourceLanguage | <code>string</code> | bcp47 id of source language such as 'en' |\n| body.targetLanguages | <code>Array</code> | optional array of target languages |\n| body.metadata | <code>Object</code> | optional metadata for the bundle |\n| body.partner | <code>string</code> | optional ID of partner assigned to translate this bundle |\n| body.notes | <code>Array.&lt;string&gt;</code> | optional note to translators |\n| cb | <code>[basicCallback](#basicCallback)</code> |  |\n\n<a name=\"Bundle+getInfo\"></a>\n\n### bundle.getInfo([opts], cb)\nGet bundle info. Returns a new Bundle object with additional fields populated.\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | Options object |\n| opts.fields | <code>String</code> |  | Comma separated list of fields |\n| opts.translationStatusMetricsByLanguage | <code>Boolean</code> |  | Optional field (false by default) |\n| opts.reviewStatusMetricsByLanguage | <code>Boolean</code> |  | Optional field (false by default) |\n| opts.partnerStatusMetricsByLanguage | <code>Boolean</code> |  | Optional field (false by default) |\n| cb | <code>[getInfoCallback](#Bundle..getInfoCallback)</code> |  | callback (err, Bundle ) |\n\n<a name=\"Bundle+languages\"></a>\n\n### bundle.languages() ⇒ <code>Array.&lt;String&gt;</code>\nReturn all of the languages (source and target) for this bundle.\nThe source language will be the first element.\nWill return undefined if this bundle was not returned by getInfo().\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n<a name=\"Bundle+getStrings\"></a>\n\n### bundle.getStrings(opts, cb)\nFetch one language's strings\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| opts | <code>Object</code> |  | options |\n| opts.languageId | <code>String</code> |  | language to fetch |\n| [opts.fallback] | <code>boolean</code> | <code>false</code> | Whether if source language value is used if translated value is not available |\n| [opts.fields] | <code>string</code> |  | Optional fields separated by comma |\n| cb | <code>[basicCallback](#basicCallback)</code> |  | callback (err, { resourceStrings: { strings … } }) |\n\n<a name=\"Bundle+entry\"></a>\n\n### bundle.entry(opts)\nCreate an entry object. Doesn't fetch data,\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n**See**: ResourceEntry~getInfo  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.languageId | <code>String</code> | language |\n| opts.resourceKey | <code>String</code> | resource key |\n\n<a name=\"Bundle+entries\"></a>\n\n### bundle.entries(opts, cb)\nList entries. Callback is called with a map of \nresourceKey to ResourceEntry objects.\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.languageId | <code>String</code> | language to fetch |\n| cb | <code>listEntriesCallback</code> | Callback with (err, map of resourceKey:ResourceEntry ) |\n\n<a name=\"Bundle+uploadStrings\"></a>\n\n### bundle.uploadStrings(opts, cb)\nUpload resource strings, replacing all current contents for the language\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.languageId | <code>String</code> | language to update |\n| opts.strings | <code>Object.&lt;string, string&gt;</code> | strings to update |\n| cb | <code>[basicCallback](#basicCallback)</code> |  |\n\n<a name=\"Bundle+update\"></a>\n\n### bundle.update(opts, cb)\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.targetLanguages | <code>array</code> | optional: list of target languages to update |\n| opts.readOnly | <code>boolean</code> | optional: set this bundle to be readonly or not |\n| opts.metadata | <code>object</code> | optional: metadata to update |\n| opts.partner | <code>string</code> | optional: partner id to update |\n| opts.notes | <code>Array.&lt;string&gt;</code> | optional notes to translator |\n| cb | <code>[basicCallback](#basicCallback)</code> | callback |\n\n<a name=\"Bundle+updateStrings\"></a>\n\n### bundle.updateStrings(opts, cb)\nUpdate some strings in a language.\n\n**Kind**: instance method of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.strings | <code>Object.&lt;string, string&gt;</code> | strings to update. |\n| opts.languageId | <code>String</code> | language to update |\n| opts.resync | <code>Boolean</code> | optional: If true, resynchronize strings  in the target language and resubmit previously-failing translation operations |\n| cb | <code>[basicCallback](#basicCallback)</code> |  |\n\n<a name=\"Bundle..getInfoCallback\"></a>\n\n### Bundle~getInfoCallback : <code>function</code>\nCallback returned by Bundle~getInfo().\n\n**Kind**: inner typedef of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| bundle | <code>[Bundle](#Bundle)</code> | bundle object with additional data |\n| bundle.updatedBy | <code>string</code> | userid that updated this bundle |\n| bundle.updatedAt | <code>Date</code> | date when the bundle was last updated |\n| bundle.sourceLanguage | <code>string</code> | bcp47 id of the source language |\n| bundle.targetLanguages | <code>Array.&lt;string&gt;</code> | array of target langauge bcp47 ids |\n| bundle.readOnly | <code>boolean</code> | true if this bundle can only be read |\n| bundle.metadata | <code>Object.&lt;string, string&gt;</code> | array of user-editable metadata |\n| bundle.translationStatusMetricsByLanguage | <code>Object</code> | additional metrics information |\n| bundle.reviewStatusMetricsByLanguage | <code>Object</code> | additional metrics information |\n\n<a name=\"Bundle..listEntriesCallback\"></a>\n\n### Bundle~listEntriesCallback : <code>function</code>\nCalled by entries()\n\n**Kind**: inner typedef of <code>[Bundle](#Bundle)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| entries | <code>Object.&lt;string, ResourceEntry&gt;</code> | map from resource key to ResourceEntry object.  The .value field will be filled in with the string value. |\n\n<a name=\"User\"></a>\n\n## User\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>String</code> | the userid |\n| updatedBy | <code>String</code> | gives information about which user updated this user last |\n| updatedAt | <code>Date</code> | the date when the item was updated |\n| type | <code>String</code> | `ADMINISTRATOR`, `TRANSLATOR`, or `READER` |\n| displayName | <code>String</code> | optional human friendly name |\n| metadata | <code>Object.&lt;string, string&gt;</code> | optional user-defined data |\n| serviceManaged | <code>Boolean</code> | if true, the GP service is managing this user |\n| password | <code>String</code> | user password |\n| comment | <code>String</code> | optional user comment |\n| externalId | <code>String</code> | optional User ID used by another system associated with this user |\n| bundles | <code>Array.&lt;string&gt;</code> | list of bundles managed by this user |\n\n\n* [User](#User)\n    * [new User(gp, props)](#new_User_new)\n    * _instance_\n        * [.update(opts, cb)](#User+update)\n        * [.delete([opts], cb)](#User+delete)\n        * [.getInfo(opts, cb)](#User+getInfo)\n    * _inner_\n        * [~getUserCallback](#User..getUserCallback) : <code>function</code>\n\n<a name=\"new_User_new\"></a>\n\n### new User(gp, props)\nNote: this constructor is not usually called directly, use Client.user(id)\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| gp | <code>[Client](#Client)</code> | parent Client object |\n| props | <code>Object</code> | properties to inherit |\n\n<a name=\"User+update\"></a>\n\n### user.update(opts, cb)\nUpdate this user. \nAll fields of opts are optional. For strings, falsy = no change, empty string `''` = deletion.\n\n**Kind**: instance method of <code>[User](#User)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>object</code> | options |\n| opts.displayName | <code>string</code> | User's display name - falsy = no change, empty string `''` = deletion. |\n| opts.comment | <code>string</code> | optional comment - falsy = no change, empty string '' = deletion. |\n| opts.bundles | <code>Array.&lt;string&gt;</code> | Accessible bundle IDs. |\n| opts.metadata | <code>object.&lt;string, string&gt;</code> | User defined user metadata containg key/value pairs.  Data will be merged in. Pass in `{}` to erase all metadata. |\n| opts.externalId | <code>string</code> | User ID used by another system associated with this user - falsy = no change, empty string '' = deletion. |\n| cb | <code>[basicCallback](#basicCallback)</code> | callback with success or failure |\n\n<a name=\"User+delete\"></a>\n\n### user.delete([opts], cb)\nDelete this user. \nNote that the service managed user\n(the initial users created by the service) may not be\n deleted.\n\n**Kind**: instance method of <code>[User](#User)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | <code>[basicCallback](#basicCallback)</code> |  | callback with success or failure |\n\n<a name=\"User+getInfo\"></a>\n\n### user.getInfo(opts, cb)\nFetch user info.\nThe callback is given a new User instance, with\nall properties filled in.\n\n**Kind**: instance method of <code>[User](#User)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | optional, ignored |\n| cb | <code>[getUserCallback](#User..getUserCallback)</code> | called with updated info |\n\n<a name=\"User..getUserCallback\"></a>\n\n### User~getUserCallback : <code>function</code>\nCallback called by Client~createUser() and User~getInfo()\n\n**Kind**: inner typedef of <code>[User](#User)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| user | <code>[User](#User)</code> | On success, the new or updated User object. |\n\n<a name=\"ResourceEntry\"></a>\n\n## ResourceEntry\nResourceEntry\nCreating this object does not modify any data.\n\n**Kind**: global class  \n**See**: Bundle~entries  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| resourceKey | <code>String</code> | key for the resource |\n| updatedBy | <code>string</code> | the user which last updated this entry |\n| updatedAt | <code>Date</code> | when this entry was updated |\n| value | <code>string</code> | the translated value of this entry |\n| sourceValue | <code>string</code> | the source value of this entry |\n| reviewed | <code>boolean</code> | indicator of whether this entry has been reviewed |\n| translationStatus | <code>string</code> | status of this translation:  `source_language`, `translated`, `in_progress`, or `failed` |\n| entry.metadata | <code>Object.&lt;string, string&gt;</code> | user metadata for this entry |\n| partnerStatus | <code>string</code> | status of partner integration |\n| sequenceNumber | <code>number</code> | relative sequence of this entry |\n| notes | <code>Array.&lt;string&gt;</code> | optional notes to translator |\n\n\n* [ResourceEntry](#ResourceEntry)\n    * [new ResourceEntry(bundle, props)](#new_ResourceEntry_new)\n    * _instance_\n        * [.getInfo([opts], cb)](#ResourceEntry+getInfo)\n        * [.update()](#ResourceEntry+update)\n    * _inner_\n        * [~getInfoCallback](#ResourceEntry..getInfoCallback) : <code>function</code>\n\n<a name=\"new_ResourceEntry_new\"></a>\n\n### new ResourceEntry(bundle, props)\nNote: this constructor is not usually called directly, use Bundle.entry(...)\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| bundle | <code>[Bundle](#Bundle)</code> | parent Bundle object |\n| props | <code>Object</code> | properties to inherit |\n\n<a name=\"ResourceEntry+getInfo\"></a>\n\n### resourceEntry.getInfo([opts], cb)\nLoad this entry's information. Callback is given\nanother ResourceEntry but one with all current data filled in.\n\n**Kind**: instance method of <code>[ResourceEntry](#ResourceEntry)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | <code>[getInfoCallback](#ResourceEntry..getInfoCallback)</code> |  | callback (err, ResourceEntry) |\n\n<a name=\"ResourceEntry+update\"></a>\n\n### resourceEntry.update()\nUpdate this resource entry's fields.\n\n**Kind**: instance method of <code>[ResourceEntry](#ResourceEntry)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts.value | <code>string</code> | string value to update |\n| opts.reviewed | <code>boolean</code> | optional boolean indicating if value was reviewed |\n| opts.metadata | <code>object</code> | optional metadata to update |\n| opts.notes | <code>Array.&lt;string&gt;</code> | optional notes to translator |\n| opts.partnerStatus | <code>string</code> | translation status maintained by partner |\n| opts.sequenceNumber | <code>string</code> | sequence number of the entry (only for the source language) |\n\n<a name=\"ResourceEntry..getInfoCallback\"></a>\n\n### ResourceEntry~getInfoCallback : <code>function</code>\nCallback called by ResourceEntry~getInfo()\n\n**Kind**: inner typedef of <code>[ResourceEntry](#ResourceEntry)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| entry | <code>[ResourceEntry](#ResourceEntry)</code> | On success, the new or updated ResourceEntry object. |\n\n<a name=\"serviceRegex\"></a>\n\n## serviceRegex\na Regex for matching the service.\nUsage: var credentials = require('cfEnv')\n     .getAppEnv().getServiceCreds(gp.serviceRegex);\n(except that it needs to match by label)\n\n**Kind**: global variable  \n**Properties**\n\n| Name |\n| --- |\n| serviceRegex | \n\n<a name=\"exampleCredentials\"></a>\n\n## exampleCredentials\nExample credentials\n\n**Kind**: global variable  \n**Properties**\n\n| Name |\n| --- |\n| exampleCredentials | \n\n<a name=\"getClient\"></a>\n\n## getClient(params) ⇒ <code>[Client](#Client)</code>\nConstruct a g11n-pipeline client. \nparams.credentials is required unless params.appEnv is supplied.\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| params | <code>Object</code> | configuration params |\n| params.appEnv | <code>Object</code> | pass the result of cfEnv.getAppEnv(). Ignored if params.credentials is supplied. |\n| params.credentials | <code>Object.&lt;string, string&gt;</code> | Bound credentials as from the CF service broker (overrides appEnv) |\n| params.credentials.url | <code>string</code> | service URL. (should end in '/translate') |\n| params.credentials.userId | <code>string</code> | service API key. |\n| params.credentials.password | <code>string</code> | service API key. |\n| params.credentials.instanceId | <code>string</code> | instance ID |\n\n<a name=\"isMissingField\"></a>\n\n## isMissingField(obj, fields) ⇒\nReturn a list of missing fields. Special cases the instanceId field.\n\n**Kind**: global function  \n**Returns**: array of which fields are missing  \n\n| Param | Description |\n| --- | --- |\n| obj | obj containing fields |\n| fields | array of fields to require |\n\n<a name=\"basicCallback\"></a>\n\n## basicCallback : <code>function</code>\nBasic Callback used throughout the SDK\n\n**Kind**: global typedef  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>Object</code> | error, or null |\n| data | <code>Object</code> | Returned data |\n\n<a name=\"ExternalService\"></a>\n\n## ExternalService : <code>Object</code>\ninfo about external services available\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>string</code> | The type of the service, such as MT for Machine Translation |\n| name | <code>string</code> | The name of the service |\n| id | <code>string</code> | The id of the service |\n| supportedTranslation | <code>Object.&lt;string, Array.&lt;string&gt;&gt;</code> | map from source language to array of target languages Example: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese. |\n\n\n*docs autogenerated via [jsdoc2md](https://github.com/jsdoc2md/jsdoc-to-markdown)*\n\nCommunity\n===\n* View or file GitHub [Issues](https://github.com/IBM-Bluemix/gp-js-client/issues)\n* Connect with the open source community on [developerWorks Open](https://developer.ibm.com/open/ibm-bluemix-globalization-pipeline/node-js-sdk/)\n\nContributing\n===\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\nLicense\n===\nApache 2.0. See [LICENSE.txt](LICENSE.txt)\n\n> Licensed under the Apache License, Version 2.0 (the \"License\");\n> you may not use this file except in compliance with the License.\n> You may obtain a copy of the License at\n> \n> http://www.apache.org/licenses/LICENSE-2.0\n> \n> Unless required by applicable law or agreed to in writing, software\n> distributed under the License is distributed on an \"AS IS\" BASIS,\n> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> See the License for the specific language governing permissions and\n> limitations under the License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
  },
  "scripts": {
    "coverage": "nyc mocha && nyc report --reporter=lcov",
    "docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
    "html": "npm run docs ; node gen-html.js",
    "mocha": "mocha --reporter dot",
    "test": "mocha",
    "vscode-typings": "tsd query node mocha q chai request --action install"
  },
  "version": "1.4.0"
}
